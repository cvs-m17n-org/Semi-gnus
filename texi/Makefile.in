infodir = @infodir@
prefix = @prefix@
srcdir = @srcdir@
subdir = texi
top_srcdir = @top_srcdir@

@SET_MAKE@
VPATH=$(srcdir)
TEXI2DVI=texi2dvi
TEXI2PDF=texi2pdf
MAKEINFO=@MAKEINFO@
EMACS=@EMACS@
EMACSINFO=$(EMACS) -batch -q -no-site-file
PDFLATEX=pdflatex
LATEX=latex
DVIPS=dvips
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
SHELL = /bin/sh
PAPERTYPE=a4
INFO_DEPS=gnus message emacs-mime
INFO_DEPS_JA=gnus-ja message-ja
INFO_DEPS_INFO=gnus.info message.info emacs-mime.info
INFO_DEPS_JA_INFO=gnus-ja.info message-ja.info

all: $(INFO_DEPS)
all-info: $(INFO_DEPS_INFO)

gnus.info: gnus.texi gnus-faq.texi
message.info: message.texi
emacs-mime.info: emacs-mime.texi

ja: $(INFO_DEPS_JA)
ja-info: $(INFO_DEPS_JA_INFO)

gnus-ja.info: gnus-ja.texi gnus-faq-ja.texi
message-ja.info: message-ja.texi

most: texi2latex.elc latex latexps

%-ja: %-ja.texi
	$(EMACSINFO) -l $(srcdir)/infohack.el \
		-eval '(infohack-texi-format "$<")'

%-ja.info: %-ja.texi
	$(EMACSINFO) -l $(srcdir)/infohack.el \
		-eval '(infohack-texi-format "$<" t)'

%.info: %.texi
	if test "x$(MAKEINFO)" = "xno" \
	  -o "$<" = "gnus-ja.texi" \
	  -o "$<" = "message-ja.texi"; then \
	  $(EMACSINFO) -l $(srcdir)/infohack.el \
		-eval '(infohack-texi-format "$<" t)'; \
	else \
	  $(MAKEINFO) -I $(srcdir) -o $@ $<; \
	fi

.SUFFIXES: .texi .dvi .ps .pdf

.texi:
	if test "x$(MAKEINFO)" = "xno" \
	  -o "$<" = "gnus-ja.texi" \
	  -o "$<" = "message-ja.texi"; then \
	  $(EMACSINFO) -l $(srcdir)/infohack.el \
		-eval '(infohack-texi-format "$<")'; \
	else \
	  $(MAKEINFO) -I $(srcdir) -o $* $<; \
	fi

dvi: gnus.dvi message.dvi refcard.dvi emacs-mime.dvi

pdf: gnus.pdf message.pdf refcard.pdf emacs-mime.pdf

.texi.dvi :
	sed -e '/@iflatex/,/@end iflatex/d' $< > gnustmp.texi
	$(TEXI2DVI) -I $(srcdir) gnustmp.texi
	cp gnustmp.dvi $*.dvi
	rm gnustmp.*

.texi.pdf :
	sed -e '/@iflatex/,/@end iflatex/d' $< > gnustmp.texi
	$(TEXI2PDF) -I $(srcdir) gnustmp.texi
	cp gnustmp.pdf $*.pdf
	rm gnustmp.*

refcard.dvi: refcard.tex gnuslogo.refcard gnusref.tex
	TEXINPUTS=$(srcdir):$$TEXINPUTS $(LATEX) refcard.tex


refcard.pdf: refcard.tex gnuslogo.refcard gnusref.tex
	epstopdf $(srcdir)/gnuslogo.refcard --outfile=gnuslogo.refcard.pdf
	TEXINPUTS=$(srcdir):$$TEXINPUTS $(PDFLATEX) refcard.tex

clean:
	rm -f *.orig *.rej *.elc *~ gnus-[0-9] gnus-[0-9][0-9]
	rm -f message-[0-9]
	rm -f $(INFO_DEPS)
	rm -f gnus-ja-[0-9] gnus-ja-[0-9][0-9]
	rm -f message-ja-[0-9]
	rm -f $(INFO_DEPS_JA)
	rm -f gnus.info-[0-9] gnus.info-[0-9][0-9]
	rm -f message.info-[0-9]
	rm -f $(INFO_DEPS_INFO)
	rm -f gnus-ja.info-[0-9] gnus-ja.info-[0-9][0-9]
	rm -f message-ja.info-[0-9]
	rm -f $(INFO_DEPS_JA_INFO)

makeinfo:
	makeinfo -o gnus gnus.texi
	makeinfo -o message message.texi

texi2latex.elc: texi2latex.el
	srcdir=$(srcdir)/../lisp $(EMACSINFO) -l $(srcdir)/../lisp/dgnushack.el --eval '(byte-compile-file "$(srcdir)/texi2latex.el")'

latex gnus.latexi gnus-faq.latexi: $(srcdir)/gnus.texi $(srcdir)/gnus-faq.texi texi2latex.elc
	srcdir=$(srcdir) $(EMACSINFO) -l ./texi2latex.elc -f latexi-translate

latexps: gnus.latexi
	$(MAKE) texi2latex.elc
	rm -f gnus.aux
	egrep -v "label.*Index|chapter.*Index" gnus.latexi > gnus.tmplatexi1
	TEXINPUTS=$(srcdir):$$TEXINPUTS $(LATEX) gnus.tmplatexi1
	./splitindex
	makeindex -o gnus.kind gnus.kidx
	makeindex -o gnus.cind gnus.cidx
	makeindex -o gnus.gind gnus.gidx
	sed 's/\\char 5E\\relax {}/\\symbol{"5E}/' < gnus.kind > gnus.tmpkind
	mv gnus.tmpkind gnus.kind
	egrep -v "end{document}" gnus.tmplatexi1 > gnus.tmplatexi
	cat postamble.tex >> gnus.tmplatexi
	$(LATEX) gnus.tmplatexi
	$(LATEX) gnus.tmplatexi
	$(DVIPS) -t $(PAPERTYPE) -f gnus.dvi > gnus.ps

pss:
	$(MAKE) latex
	$(MAKE) latexps

psout:
	$(MAKE) latex
	$(MAKE) latexboth
	$(MAKE) out

latexboth:
	rm -f gnus-manual-a4.ps.gz gnus-manual-standard.ps.gz
	$(MAKE) latexps
	mv gnus.ps gnus-manual-a4.ps
	gzip gnus-manual-a4.ps
	sed 's/,a4paper/,letterpaper/' gnus.latexi > gnus-standard.latexi
	mv gnus-standard.latexi gnus.latexi
	$(MAKE) latexps PAPERTYPE=letter
	mv gnus.ps gnus-manual-standard.ps
	gzip gnus-manual-standard.ps

out:
	cp gnus-manual-standard.ps.gz \
	gnus-manual-a4.ps.gz \
	/local/ftp/pub/emacs/gnus/manual
	mv gnus-manual-standard.ps.gz \
	gnus-manual-a4.ps.gz \
	/hom/larsi/www_docs/www.gnus.org/documents

veryclean: clean
	rm -f gnus.dvi gnus.ps texi2latex.elc

distclean: clean
	rm -f Makefile

install: $(INFO_DEPS)
	$(SHELL) $(top_srcdir)/mkinstalldirs $(infodir)
	@list='$(INFO_DEPS)'; \
	for file in $$list; do \
	  for ifile in `echo $$file $$file-[0-9] $$file-[0-9][0-9]`; do \
	    if test -f $$ifile; then \
	      echo " $(INSTALL_DATA) $$ifile $(infodir)/$$ifile"; \
	      $(INSTALL_DATA) $$ifile $(infodir)/$$ifile; \
	    else : ; fi; \
	  done; \
	done
	@if $(SHELL) -c 'install-info --version | sed 1q | fgrep -s -v -i debian' >/dev/null 2>&1; then \
	  list='$(INFO_DEPS)'; \
	  for file in $$list; do \
	    echo " install-info --info-dir=$(infodir) $(infodir)/$$file";\
	    install-info --info-dir=$(infodir) $(infodir)/$$file || :;\
	  done; \
	else : ; fi

install-ja: $(INFO_DEPS_JA)
	$(MAKE) INFO_DEPS='$(INFO_DEPS_JA)' EMACS="$(EMACS)" \
		infodir="$(infodir)" install

install-info: $(INFO_DEPS_INFO)
	$(MAKE) INFO_DEPS='$(INFO_DEPS_INFO)' EMACS="$(EMACS)" \
		infodir="$(infodir)" install

install-ja-info: $(INFO_DEPS_JA_INFO)
	$(MAKE) INFO_DEPS='$(INFO_DEPS_JA_INFO)' EMACS="$(EMACS)" \
		infodir="$(infodir)" install

tmps:
	if [ ! -e tmp ]; then mkdir tmp; fi
	$(MAKE) screens
	$(MAKE) herdss
	$(MAKE) etcs
	$(MAKE) piconss
	$(MAKE) xfaces
	$(MAKE) smiley
	$(MAKE) miscs

herdss:
	cd herds ; for i in new-herd-[0-9]*.gif; do echo $$i; giftopnm $$i | pnmcrop -white | pnmmargin -white 9 | pnmscale 2 | pnmconvol convol5.pnm  | ppmtopgm | pnmdepth 255 | pnmtops -width 100 -height 100 -noturn > ../tmp/`basename $$i .gif`.ps; done
	cd herds ; giftopnm new-herd-section.gif | pnmscale 4 | pnmconvol convol11.pnm | ppmtopgm | pnmdepth 255 | pnmtops -noturn -width 100 -height 100 > ../tmp/new-herd-section.ps


screens:
	cd screen ; for i in *.gif; do echo $$i; giftopnm $$i | pnmmargin -black 1 | ppmtopgm | pnmtops -width 100 -height 100 -noturn > ../tmp/`basename $$i .gif`.ps; done

miscs:
	giftopnm misc/larsi.gif | ppmtopgm | pnmtops -noturn > tmp/larsi.ps
	tifftopnm misc/eseptember.tif | pnmscale 4 | ppmtopgm | pnmtops -noturn  -width 100 -height 100 > tmp/september.ps
	tifftopnm misc/fseptember.tif | pnmscale 2 | ppmtopgm | pnmtops -noturn  -width 100 -height 100 > tmp/fseptember.ps
	tifftopnm misc/fred.tif | pnmscale 2 | ppmtopgm | pnmtops -noturn  -width 100 -height 100 > tmp/fred.ps
	tifftopnm misc/ered.tif | pnmscale 2 | ppmtopgm | pnmtops -noturn  -width 100 -height 100 > tmp/red.ps

etcs:
	cd etc; for i in gnus-*.xpm; do echo $$i; xpmtoppm $$i | ppmtopgm | pnmdepth 255 | pnmtops -noturn > ../tmp/`basename $$i .xpm`.ps; done

piconss:
	cd picons; for i in *.xbm; do echo $$i; xbmtopbm $$i | pnmtops -noturn > ../tmp/picons-`basename $$i .xbm`.ps; done
	cd picons; for i in *.gif; do echo $$i; giftopnm $$i | ppmtopgm | pnmtops -noturn > ../tmp/picons-`basename $$i .gif`.ps; done
	for i in tmp/picons-*.ps; do echo "\\gnuspicon{$$i}"; done > picons.tex

xfaces:
	cd xface; for i in *.gif; do echo $$i; giftopnm $$i | ppmtopgm | pnmtops -noturn > ../tmp/xface-`basename $$i .gif`.ps; done
	for i in tmp/xface-*.ps; do \
		if [ -n "$$a" ]; then a=""; echo "{$$i}"; else \
		a="h"; echo -n "\\gnusxface{$$i}"; fi done > xface.tex; \
		if [ -n "$$a" ]; then echo "{$$i}" >> xface.tex; fi

smiley:
	cd smilies; tifftopnm BigFace.tif | ppmtopgm | pnmtops > ../tmp/BigFace.ps
	cd smilies; for i in *.xpm; do echo $$i; sed "s/none/#FFFFFF/" $$i | xpmtoppm | ppmtopgm | pnmdepth 255 | pnmtops > ../tmp/smiley-`basename $$i .xpm`.ps; done
	for i in tmp/smiley-*.ps; do \
		if [ -n "$$a" ]; then a=""; echo "{$$i}"; else \
		a="h"; echo -n "\\gnussmiley{$$i}"; fi done > smiley.tex; \
		if [ -n "$$a" ]; then echo "{$$i}" >> smiley.tex; fi

pspackage:
	tar czvf pspackage.tar.gz gnus-faq.texi gnus.texi herds misc pagestyle.sty picons pixidx.sty postamble.tex ps screen smilies splitindex texi2latex.el xface Makefile README etc

complete:
	$(MAKE) texi2latex.elc
	$(MAKE) tmps
	$(MAKE) pss

Makefile: $(srcdir)/Makefile.in ../config.status
	cd .. \
	  && CONFIG_FILES=$(subdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
