prefix = @prefix@
datadir = @datadir@
infodir = @infodir@
lispdir = @lispdir@
srcdir = @srcdir@

@SET_MAKE@
EMACS = @EMACS@
XEMACS = @XEMACS@
PACKAGEDIR = @PACKAGEDIR@
GNUS_PRODUCT_NAME = @GNUS_PRODUCT_NAME@

# It may be needed for Meadow/NTEmacs when sh.exe is used for SHELL.
# Because Meadow/NTEmacs will get the value of the current-directory from
# the environment variable PWD, but sh.exe will not take care of it even
# if the current-directory has changed.  So we should invalidate it.
PWD=

# It will be used to look for the XEmacs package path if this file is
# mis-configured (e.g. configured for FSFmacs).
EXAMINE_PACKAGEDIR = $(XEMACS) -batch -q -no-site-file -eval \
	"(let (package-dir) \
	   (if (boundp (quote early-packages)) \
	       (let ((dirs (delq nil (append (if early-package-load-path \
						 early-packages) \
					     (if late-package-load-path \
						 late-packages) \
					     (if last-package-load-path \
						 last-packages))))) \
		 (while (and dirs (not package-dir)) \
		   (if (file-directory-p (car dirs)) \
		       (setq package-dir (car dirs) \
			     dirs (cdr dirs)))))) \
	   (princ (or package-dir \"\")))" 2>/dev/null

all: lick info

all-ja: lick info info-ja

lick:
	cd lisp && $(MAKE) EMACS="$(EMACS)" lispdir="$(lispdir)" all

#install: install-lisp install-info install-etc
install: install-lisp install-info

install-ja: install install-info-ja

install-lisp:
	cd lisp && $(MAKE) EMACS="$(EMACS)" lispdir="$(lispdir)" install

install-info:
	cd texi && $(MAKE) EMACS="$(EMACS)" infodir="$(infodir)" install

install-etc:
	cd etc && $(MAKE) EMACS="$(EMACS)" install

install-info-ja:
	cd texi && $(MAKE) EMACS="$(EMACS)" infodir="$(infodir)" install-ja

## Rule for XEmacs package.
install-package: xclever compose-package remove-extra-files-in-package \
	install-package-lisp \
	install-package-info install-package-manifest

install-package-ja: xclever compose-package remove-extra-files-in-package \
	install-package-lisp \
	install-package-info install-package-info-ja \
	install-package-manifest

package: xlick xinfo compose-package

package-ja: xlick xinfo xinfo-ja compose-package

# Sub-rule for XEmacs package.
install-package-lisp:
	@if test x$(PACKAGEDIR) = x; then \
	  package_dir=`$(EXAMINE_PACKAGEDIR)`; \
	else \
	  package_dir="$(PACKAGEDIR)"; \
	fi; \
	echo "cd lisp && $(MAKE) EMACS=$(XEMACS)" \
		"lispdir=$$package_dir""/lisp/$(GNUS_PRODUCT_NAME)" \
		"install"; \
	cd lisp && $(MAKE) EMACS="$(XEMACS)" \
		lispdir="$$package_dir""/lisp/$(GNUS_PRODUCT_NAME)" \
		install

install-package-info:
	@if test x$(PACKAGEDIR) = x; then \
	  package_dir=`$(EXAMINE_PACKAGEDIR)`; \
	else \
	  package_dir="$(PACKAGEDIR)"; \
	fi; \
	echo "cd texi && $(MAKE) EMACS=$(XEMACS)" \
		"infodir=$$package_dir""/info install-info"; \
	cd texi && $(MAKE) EMACS="$(XEMACS)" \
		infodir="$$package_dir""/info" install-info

install-package-info-ja:
	@if test x$(PACKAGEDIR) = x; then \
	  package_dir=`$(EXAMINE_PACKAGEDIR)`; \
	else \
	  package_dir="$(PACKAGEDIR)"; \
	fi; \
	echo "cd texi && $(MAKE) EMACS=$(XEMACS)" \
		"infodir=$$package_dir""/info install-ja-info"; \
	cd texi && $(MAKE) EMACS="$(XEMACS)" \
		infodir="$$package_dir""/info" install-ja-info

install-package-manifest:
	@if test x$(PACKAGEDIR) = x; then \
	  package_dir=`$(EXAMINE_PACKAGEDIR)`; \
	else \
	  package_dir="$(PACKAGEDIR)"; \
	fi; \
	echo "cd lisp && $(MAKE) EMACS=$(XEMACS) PACKAGEDIR=$$package_dir" \
		"install-package-manifest"; \
	cd lisp && $(MAKE) EMACS="$(XEMACS)" PACKAGEDIR=$$package_dir \
		install-package-manifest

remove-extra-files-in-package:
	@if test x$(PACKAGEDIR) = x; then \
	  package_dir=`$(EXAMINE_PACKAGEDIR)`; \
	else \
	  package_dir="$(PACKAGEDIR)"; \
	fi; \
	echo "cd lisp && $(MAKE) EMACS=$(XEMACS) PACKAGEDIR=$$package_dir" \
		"remove-extra-files-in-package"; \
	cd lisp && $(MAKE) EMACS="$(XEMACS)" PACKAGEDIR=$$package_dir \
		remove-extra-files-in-package

compose-package:
	cd lisp && $(MAKE) EMACS="$(XEMACS)" compose-package
##

xclever:
	cd lisp && $(MAKE) EMACS="$(XEMACS)" lispdir="$(lispdir)" clever

xlick:
	cd lisp && $(MAKE) EMACS="$(XEMACS)" lispdir="$(lispdir)" all

xinfo:
	cd texi && $(MAKE) EMACS="$(XEMACS)" all-info

xinfo-ja:
	cd texi && $(MAKE) EMACS="$(XEMACS)" ja-info

# Rule for Lars and nobody else.
some:
	cd lisp && $(MAKE) EMACS="$(EMACS)" some
l:
	cd lisp && $(MAKE) EMACS="$(EMACS)" clever

info:
	cd texi && $(MAKE) EMACS="$(EMACS)" all

info-ja:
	cd texi && $(MAKE) EMACS=$(EMACS) ja

clean:
	rm -f */*.orig */*.rej *.orig *.rej
	rm -f MANIFEST.*
	for i in lisp texi; do (cd $$i; $(MAKE) clean); done

elclean:
	cd lisp && rm -f *.elc auto-autoloads.el custom-load.el

x:
	$(MAKE) EMACS="$(XEMACS)"

xsome:
	$(MAKE) EMACS="$(XEMACS)" some

distclean: clean
	rm -rf *~
	for i in lisp texi etc; do (cd $$i; $(MAKE) distclean); done
	rm -f config.log config.status config.cache Makefile

config.status: $(srcdir)/configure
	$(SHELL) ./config.status --recheck
$(srcdir)/configure: $(srcdir)/configure.in
	cd $(srcdir) && autoconf
Makefile: $(srcdir)/Makefile.in config.status
	CONFIG_FILES=$@ CONFIG_HEADERS= $(SHELL) ./config.status

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
